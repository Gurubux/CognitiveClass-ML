DATA VISUALIZATION WITH PYTHON
MODULE 1 - INTRODUCTION TO VISUALIZATION TOOLS
INTRODUCTION TO DATA VISUALIZATION
INTRODUCTION TO MATPLOTLIB
BASIC PLOTTING WITH MATPLOTLIB
DATASET ON IMMIGRATION TO CANADA
LINE PLOTS

MODULE 2 - BASIC VISUALIZATION TOOLS
AREA PLOTS
HISTOGRAMS
BAR CHARTS

MODULE 3 - SPECIALIZED VISUALIZATION TOOLS
PIE CHARTS
BOX PLOTS
SCATTER PLOTS
BUBBLE PLOTS

MODULE 4 - EXTRA VISUALIZATION TOOLS
WAFFLE CHARTS
WORD CLOUDS
SEABORN AND REGRESSION PLOTS

MODULE 5 - CREATING MAPS AND VISUALIZING GEOSPATIAL DATA
INTRODUCTION TO FOLIUM AND MAP STYLES
MAPS WITH MARKERS 
CHOROPLETH MAPS


@The Dataset: Immigration to Canada from 1980 to 2013
"https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx"
\	Type		Coverage	OdName		AREA	AreaName  REG  RegName	 DEV	DevName	           1980	...		2006	2007	2008	2009	2010	2011	2012	2013
0	Immigrants	Foreigners	Afghanistan	935		Asia	  5501 S Asia	 902	Developing regions	16	...	    3009	2652	2111	1746	1758	2203	2635	2004
1	Immigrants	Foreigners	Albania		908		Europe	  925  S Europe	 901	Developed regions	1	...		856	     702	560     716	    561	    539	    620	    603
2	Immigrants	Foreigners	Algeria		903		Africa	  912  N Africa	 902	Developing regions	80	...		4807	3623	4005	5393	4752	4325	3774	4331
3	Immigrants	Foreigners	American 	909		Oceania	  957  Polynesia 902	Developing regions	0	...		1		0		0		0		0		0		0		0
4	Immigrants	Foreigners	Andorra		908		Europe	  925  S Europe	 901	Developed regions	0	...		1		1		0		0		0		0		1		1

195 rows × 43 columns

df_can.columns.values
array(['Type', 'Coverage', 'OdName', 'AREA', 'AreaName', 'REG', 'RegName',
       'DEV', 'DevName', 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987,
       1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
       1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
       2010, 2011, 2012, 2013], dtype=object)

# in pandas axis=0 represents rows (default) and axis=1 represents columns.
df_can.drop(['AREA','REG','DEV','Type','Coverage'], axis=1, inplace=True)
\	OdName			AreaName   RegName	 DevName	        1980...		2006	2007	2008	2009	2010	2011	2012	2013
0	Afghanistan		Asia	   S Asia	 Developing regions	16	...	    3009	2652	2111	1746	1758	2203	2635	2004
1	Albania			Europe	   S Europe	 Developed regions	1	...		856	     702	560     716	    561	    539	    620	    603
2	Algeria			Africa	   N Africa	 Developing regions	80	...		4807	3623	4005	5393	4752	4325	3774	4331
3	American 		Oceania	   Polynesia Developing regions	0	...		1		0		0		0		0		0		0		0
4	Andorra			Europe	   S Europe	 Developed regions	0	...		1		1		0		0		0		0		1		1
95 rows × 38 columns

df_can.rename(columns={'OdName':'Country', 'AreaName':'Continent', 'RegName':'Region'}, inplace=True)
\	Country			Continent  Region	 DevName	        1980...		2006	2007	2008	2009	2010	2011	2012	2013
0	Afghanistan		Asia	   S Asia	 Developing regions	16	...	    3009	2652	2111	1746	1758	2203	2635	2004
1	Albania			Europe	   S Europe	 Developed regions	1	...		856	     702	560     716	    561	    539	    620	    603
2	Algeria			Africa	   N Africa	 Developing regions	80	...		4807	3623	4005	5393	4752	4325	3774	4331
3	American 		Oceania	   Polynesia Developing regions	0	...		1		0		0		0		0		0		0		0
4	Andorra			Europe	   S Europe	 Developed regions	0	...		1		1		0		0		0		0		1		1
95 rows × 38 columns

df_can['Total'] = df_can.sum(axis=1)
\	Country			Continent  Region	 DevName	        1980...		2006	2007	2008	2009	2010	2011	2012	2013	Total
0	Afghanistan		Asia	   S Asia	 Developing regions	16	...	    3009	2652	2111	1746	1758	2203	2635	2004	117278
1	Albania			Europe	   S Europe	 Developed regions	1	...		856	     702	560     716	    561	    539	    620	    603		31398
2	Algeria			Africa	   N Africa	 Developing regions	80	...		4807	3623	4005	5393	4752	4325	3774	4331	138878	
3	American 		Oceania	   Polynesia Developing regions	0	...		1		0		0		0		0		0		0		0		12
4	Andorra			Europe	   S Europe	 Developed regions	0	...		1		1		0		0		0		0		1		1		30
95 rows × 39 columns

df['column']  
      (returns series)
      df_can.Country
df[['column 1', 'column 2']] 
      (returns dataframe)
      df_can[['Country', 1980, 1981, 1982, 1983, 1984, 1985]]

#setting the 'Country' column as the index using set_index() method.
df_can.set_index('Country', inplace=True)
>>> 95 rows × 38 columns

# optional: to remove the name of the index
df_can.index.name = None

# for the sake of consistency, we will convert all column names to string later on.
df_can.columns = list(map(str, df_can.columns))

# useful for plotting later on
years = list(map(str, range(1980, 2014)))
years
['1980','1981','1982','1983','1984','1985','1986','1987','1988','1989','1990','1991','1992','1993','1994','1995','1996','1997','1998','1999','2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013']

# Filtering based on a criteria
# 1. create the condition boolean series
condition = df_can['Continent'] == 'Asia'
>>> Afghanistan                                              True
	Albania                                                 False
	Algeria                                                 False
	American Samoa                                          False
	Andorra                                                 False
	Angola                                                  False
	 ...													 ...
# 2. pass this condition into the dataFrame
df_can[condition]
>>>
\			Continent	Region			DevName				1980	1981	1982	1983	1984	1985	1986	...		2009	2010	2011	2012	2013	Total
Afghanistan	Asia		Southern Asia	Developing regions	16		39		39		47		71		340		496		...		1746	1758	2203	2635	2004	58639
Armenia		Asia		Western Asia	Developing regions	0		0		0		0		0		0		0		...		267		252		236		258		207		3310
Azerbaijan	Asia		Western Asia	Developing regions	0		0		0		0		0		0		0		...		165		209		138		161		57		2649
Bahrain		Asia		Western Asia	Developing regions	0		2		1		1		1		3		0		...		35		28		21		39		32		475

# let's filter for AreaNAme = Asia and RegName = Southern Asia
df_can[(df_can['Continent']=='Asia') & (df_can['Region']=='Southern Asia')]
>>> 9 rows × 38 columns


************************************************************************************************************
MODULE 1 - INTRODUCTION TO VISUALIZATION TOOLS
************************************************************************************************************
INTRODUCTION TO DATA VISUALIZATION
INTRODUCTION TO MATPLOTLIB
BASIC PLOTTING WITH MATPLOTLIB
DATASET ON IMMIGRATION TO CANADA
LINE PLOTS   -  kind='line'
 Pandas plots the indices on the x-axis and the columns as individual lines on the y-axis. 
1. Line Plots 
	- displays information as a series of data points called 'markers' 
	- connected by straight line segments. 
	- a continuous data set.
	- trend-based visualizations of data over a period of time.

	haiti.index = haiti.index.map(int) # let's change the index values of Haiti to type integer for plotting
	haiti = df_can.loc['Haiti', years] # passing in years 1980 - 2013 to exclude the 'total' column
   \haiti.plot() # or haiti.plot(kind='line')
	plt.title('Immigration from Haiti')
	plt.ylabel('Number of immigrants')
	plt.xlabel('Years')
	
	# We can clearly notice how number of immigrants from Haiti spiked up from 2010 as Canada stepped up its efforts to accept refugees from Haiti. Let's annotate this  spike in the plot by using the plt.text() method.
	plt.text(2000, 6000, '2010 Earthquake') # see note below
*NOTE*
	Since the x-axis (years) is type 'integer', we specified x as a year. The y axis (number of immigrants) is type 'integer', so we can just specify the value y = 6000.
    	plt.text(2000, 6000, '2010 Earthquake') # years stored as type int
	If the years were stored as type 'string', we would need to specify x as the index position of the year. Eg 20th index is year 2000 since it is the 20th year with a base year of 1980.
    	plt.text(20, 6000, '2010 Earthquake') # years stored as type int
	
	df_CI = df_can.loc[['India','China'], years]
	df_CI.head()
	df_CI.plot(kind = 'line')
	*NOTE* "Recall that pandas plots the indices on the x-axis and the columns as individual lines on the y-axis. Since df_CI is a dataframe with the country as the index and years as the columns, we must first transpose the dataframe using transpose() method to swap the row and columns."
	
	df_CI = df_CI.transpose()
	df_CI.head()
	df_CI.plot(kind='line')
*Note*: 
How come we didn't need to transpose Haiti's dataframe before plotting (like we did for df_CI)?
	That's because haiti is a series as opposed to a dataframe, and has the years as its indices as shown below.


@Question: Compare the trend of top 5 countries that contributed the most to immigration to Canada.

df_can.columns
df_sorted = df_can.sort_values(by=['Total'], ascending=[False])
# OR df_can.sort_values(by='Total', ascending=False, axis=0, inplace=True)
df_sorted_top5 = df_sorted.iloc[:5]
# OR df_sorted.head(5)
df_sorted_top5 = df_sorted_top5.loc[:, years].transpose()
# OR df_sorted_top5 = df_sorted_top5[years].transpose() 
df_sorted_top5.plot(kind='line',figsize=(10,7))
plt.title('Immigration Trend of Top 5 Countries')
plt.ylabel('Number of Immigrants')
plt.xlabel('Years')
plt.show()


-----------------------------------------------------------------------
The full list of available plots are as follows:

bar 		   for vertical bar plots
barh 		   for horizontal bar plots
hist 		   for histogram
box 		   for boxplot
kde or density for density plots
area 		   for area plots
pie 		   for pie plots
scatter 	   for scatter plots
hexbin 		   for hexbin plot
************************************************************************************************************
MODULE 2 - BASIC VISUALIZATION TOOLS
************************************************************************************************************
AREA PLOTS  -  kind='area'

df_top5.index = df_top5.index.map(int) # let's change the index values of df_top5 to type integer for plotting
df_top5.plot(kind='area', 
             stacked=False, # stacked by default - True
             figsize=(20, 10), # pass a tuple (x, y) size
             alpha=0.25, 	   # 0-1, default value a= 0.5
             )

plt.title('Immigration Trend of Top 5 Countries')
plt.ylabel('Number of Immigrants')
plt.xlabel('Years')
plt.show()

-----------------------------------------------------------------------
@Two types of plotting
*Option 1: Scripting layer (procedural method) - using matplotlib.pyplot as 'plt' *
	You can use plt i.e. matplotlib.pyplot and add more elements by calling different methods procedurally; for example, plt.title(...) to add title or plt.xlabel(...) to add label to the x-axis.

    # Option 1: This is what we have been using so far
    df_top5.plot(kind='area', alpha=0.35, figsize=(20, 10)) 
    plt.title('Immigration trend of top 5 countries')
    plt.ylabel('Number of immigrants')
    plt.xlabel('Years')

*Option 2: Artist layer (Object oriented method) - using an Axes instance from Matplotlib (preferred) *
	You can use an Axes instance of your current plot and store it in a variable (eg. ax). You can add more elements by calling methods with a little change in syntax (by adding "set_" to the previous methods). For example, use ax.set_title() instead of plt.title() to add title, or ax.set_xlabel() instead of plt.xlabel() to add label to the x-axis.

	This option sometimes is more transparent and flexible to use for advanced plots (in particular when having multiple plots, as you will see later).

	# option 2: preferred option with more flexibility
	ax = df_top5.plot(kind='area', alpha=0.35, figsize=(20, 10))
	
	ax.set_title('Immigration Trend of Top 5 Countries')
	ax.set_ylabel('Number of Immigrants')
	ax.set_xlabel('Years')



df_least5 = df_can.tail(5)
df_least5 = df_least5[years].transpose() 
df_least5.head()

df_least5.index = df_least5.index.map(int) # let's change the index values of df_least5 to type integer for plotting
df_least5.plot(kind='area', alpha=0.45, figsize=(20, 10)) 
plt.title('Immigration Trend of 5 Countries with Least Contribution to Immigration')
plt.ylabel('Number of Immigrants')
plt.xlabel('Years')
plt.show()

### type your answer here
axis = df_least5.plot(kind='area', alpha=0.45, figsize=(20, 10)) 
axis.set_title('Immigration Trend of 5 Countries with Least Contribution to Immigration')
axis.set_ylabel('Number of Immigrants')
axis.set_xlabel('Years')


-----------------------------------------------------------------------
HISTOGRAMS  -  kind='hist'
A histogram is a way of representing the frequency distribution of numeric dataset. The way it works is it partitions the x-axis into bins, assigns each data point in our dataset to a bin, and then counts the number of data points that have been assigned to each bin. So the y-axis is the frequency or the number of data points in each bin. Note that we can change the bin size and usually one needs to tweak it so that the distribution is displayed nicely.

@Question: What is the frequency distribution of the number (population) of new immigrants from the various countries to Canada in 2013?
# np.histogram returns 2 values
count, bin_edges = np.histogram(df_can['2013'])
print(count) # frequency count
print(bin_edges) # bin ranges, default = 10 bins
>>>[	178  	 11   	 1   	 2   	 0   	 0   	 0   	 0   	 1   	 2  ]
	[ 0.   3412.9  6825.8 10238.7 13651.6 17064.5 20477.4 23890.3 27303.2 30716.1 34129. ]
#By default, the histrogram method breaks up the dataset into 10 bins. The figure below summarizes the bin ranges and the frequency distribution of immigration in 2013.

df_can['2013'].head()
>>> Country
	India                                                   33087
	China                                                   34129
	United Kingdom of Great Britain and Northern Ireland     5827
	Philippines                                             29544
	Pakistan                                                12603
df_can['2013'].plot(kind='hist', figsize=(8, 5))
plt.title('Histogram of Immigration from 195 Countries in 2013') # add a title to the histogram
plt.ylabel('Number of Countries') # add y-label
plt.xlabel('Number of Immigrants') # add x-label
plt.show()

*Notice that the x-axis labels do not match with the bin size. This can be fixed by passing in a xticks keyword that contains the list of the bin sizes, as follows:
df_can['2013'].plot(kind='hist', figsize=(8, 5), xticks=\bin_edges)


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
"Side Note: We could use df_can['2013'].plot.hist(), instead. In fact, throughout this lesson, using some_data.plot(kind='type_plot', ...) is equivalent to some_data.plot.type_plot(...). That is, passing the type of the plot as argument or method behaves the same."
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


Question: What is the immigration distribution For Denmark, Norway, and Sweden For years 1980 - 2013 ?
df_can.loc[['Denmark', 'Norway', 'Sweden'], years]
>>> 
		1980	1981	1982	1983	1984	1985	1986	1987	1988	1989	...	2004	2005	2006	2007	2008	2009	2010	2011	2012	2013
Country																					
Denmark	272	293	299	106	93	73	93	109	129	129											...	89	62	101	97	108	81	92	93	94	81
Norway	116	77	106	51	31	54	56	80	73	76											...	73	57	53	73	66	75	46	49	53	59
Sweden	281	308	222	176	128	158	187	198	171	182											...	129	205	139	193	165	167	159	134	140	140


df_can.loc[['Denmark', 'Norway', 'Sweden'], years].plot.hist() # Frequency of Years i.e in x year(column) how many countrys(rows) 	
#Instead of plotting the population frequency distribution of the population for the 3 countries, pandas instead plotted the population frequency distribution for the years.
#This can be easily fixed by first transposing the dataset, and then plotting as shown below
df_t = df_can.loc[['Denmark', 'Norway', 'Sweden'], years].transpose()
df_t.head()
Country	Denmark	Norway	Sweden
1980	272		116		281
1981	293		77		308
1982	299		106		222
1983	106		51		176
1984	93		31		128
df_t.plot(kind='hist', figsize=(10, 6))

plt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')
plt.ylabel('Number of Years')
plt.xlabel('Number of Immigrants')

plt.show()

#Improve
# let's get the x-tick values
count, bin_edges = np.histogram(df_t, 15)

# un-stacked histogram
df_t.plot(kind ='hist', 
          figsize=(10, 6),
          bins=15,
          alpha=0.6,
          xticks=bin_edges,
          color=['coral', 'darkslateblue', 'mediumseagreen']
         )

plt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')
plt.ylabel('Number of Years')
plt.xlabel('Number of Immigrants')

plt.show()


Tip: For a full listing of colors available in Matplotlib, run the following code in your python shell:

import matplotlib
for name, hex in matplotlib.colors.cnames.items():
    print(name, hex)

#STACKED
count, bin_edges = np.histogram(df_t, 15)
xmin = bin_edges[0] - 10   #  first bin value is 31.0, adding buffer of 10 for aesthetic purposes 
xmax = bin_edges[-1] + 10  #  last bin value is 308.0, adding buffer of 10 for aesthetic purposes

# stacked Histogram
df_t.plot(kind='hist',
          figsize=(10, 6), 
          bins=15,
          xticks=bin_edges,
          color=['coral', 'darkslateblue', 'mediumseagreen'],
          stacked=True,
          xlim=(xmin, xmax)
         )

plt.title('Histogram of Immigration from Denmark, Norway, and Sweden from 1980 - 2013')
plt.ylabel('Number of Years')
plt.xlabel('Number of Immigrants') 

plt.show()
-----------------------------------------------------------------------
BAR CHARTS  -  kind=bar kind=bar
A bar plot is a way of representing data where the length of the bars represents the magnitude/size of the feature/variable. Bar graphs usually represent numerical and categorical variables grouped in intervals.
kind=bar creates a vertical bar plot
kind=barh creates a horizontal bar plot

Vertical bar graphs are particuarly useful in analyzing time series data. One disadvantage is that they lack space for text labelling at the foot of each bar.

@Question: Let`s compare the number of Icelandic immigrants (country = 'Iceland') to Canada from year 1980 to 2013. 2008 - 2011 Icelandic Financial Crisis

# step 1: get the data
df_iceland = df_can.loc['Iceland', years]
df_iceland.head()

# step 2: plot data
df_iceland.plot(kind='bar', figsize=(10, 6))

plt.xlabel('Year') # add to x-label to the plot
plt.ylabel('Number of immigrants') # add y-label to the plot
plt.title('Icelandic immigrants to Canada from 1980 to 2013') # add title to the plot

plt.show()


Annotate on the graph - An Arrow
s: str, the text of annotation.
xy: Tuple specifying the (x,y) point to annotate (in this case, end point of arrow).
xytext: Tuple specifying the (x,y) point to place the text (in this case, start point of arrow).
xycoords: The coordinate system that xy is given in - 'data' uses the coordinate system of the object being annotated (default).
arrowprops: Takes a dictionary of properties to draw the arrow:
	arrowstyle: Specifies the arrow style, '->' is standard arrow.
	connectionstyle: Specifies the connection type. arc3 is a straight line.
	color: Specifes color of arror.
	lw: Specifies the line width.


# Annotate arrow
plt.annotate('',                      # s: str. Will leave it blank for no text
             xy=(32, 70),             # place head of the arrow at point (year 2012 , pop 70)
             xytext=(28, 20),         # place base of the arrow at point (year 2008 , pop 20)
             xycoords='data',         # will use the coordinate system of the object being annotated 
             arrowprops=dict(arrowstyle='->', connectionstyle='arc3', color='blue', lw=2)
            )
Annotate a text
#Let's also annotate a text to go over the arrow. We will pass in the following additional parameters:
	rotation: rotation angle of text in degrees (counter clockwise)
	va: vertical alignment of text [‘center’ | ‘top’ | ‘bottom’ | ‘baseline’]
	ha: horizontal alignment of text [‘center’ | ‘right’ | ‘left’]

# Annotate Text
plt.annotate('2008 - 2011 Financial Crisis', # text to display
             xy=(28, 30),                    # start the text at at point (year 2008 , pop 30)
             rotation=72.5,                  # based on trial and error to match the arrow
             va='bottom',                    # want the text to be vertically 'bottom' aligned
             ha='left',                      # want the text to be horizontally 'left' algned.
            )



@Question: Using the scripting layter and the df_can dataset, create a horizontal bar plot showing the total number of immigrants to Canada from the top 15 countries, for the period 1980 - 2013. Label each country with the total immigrant count.
### type your answer here
df_top_15 = df_can.tail(15).transpose()
df_top_15 = df_top_15.loc['Total']
df_top_15.head()

### type your answer here
df_top_15.plot(kind = 'barh', figsize=(10, 6))

plt.xlabel('Total Number of Immigrants') # add to x-label to the plot
plt.ylabel('Top 15 Countries ') # add y-label to the plot
plt.title('Top 15 immigrants to Canada from 1980 to 2013') # add title to the plot

plt.show()



************************************************************************************************************
MODULE 3 - SPECIALIZED VISUALIZATION TOOLS
************************************************************************************************************
PIE CHARTS
BOX PLOTS
SCATTER PLOTS
BUBBLE PLOTS

************************************************************************************************************
MODULE 4 - EXTRA VISUALIZATION TOOLS
************************************************************************************************************
WAFFLE CHARTS
WORD CLOUDS
SEABORN AND REGRESSION PLOTS
import seaborn as sns
ax = sns.regplot(x="year", y="total", data=data_dataframe, color="green", marker="+")
************************************************************************************************************
MODULE 5 - CREATING MAPS AND VISUALIZING GEOSPATIAL DATA
************************************************************************************************************
INTRODUCTION TO FOLIUM AND MAP STYLES
MAPS WITH MARKERS 
CHOROPLETH MAPS

************************************************************************************************************
jayrajasekharan,ehsanmkermani,slobodan-markovic,aklson
 Ehsan M. Kermani, and Slobodan Markovic  Alex Aklson


 I completed the 3rd and final course of 'Applied Data Science with Python' on @CognitiveClass. Take a look at my certificate. Kudos Team Jay Rajasekharan, Ehsan M. Kermani,Slobodan Markovic and @aklson_DS 
@IBMDataScience @IBM
https://courses.cognitiveclass.ai/certificates/8883eb581add41ec9f7e5eae0ad4bc3a


View my verified achievement from IBM on Acclaim on @CognitiveClass
#DataScience #Python #DataVisualization #DataAnalysis #pandas #seaborn #Folium
Thanks @IBM @IBMDataScience
Kudos team #IBM @aklson_DS Jay Rajasekharan, Ehsan M. Kermani and Slobodan Markovic
