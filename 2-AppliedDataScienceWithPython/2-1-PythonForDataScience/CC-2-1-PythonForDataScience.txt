2-1-Python For Data Science

MODULE 1 - PYTHON BASICS
YOUR FIRST PROGRAM
TYPES
EXPRESSIONS AND VARIABLES
STRING OPERATIONS


MODULE 2 - PYTHON DATA STRUCTURES
LISTS AND TUPLES
SETS
DICTIONARIES


MODULE 3 - PYTHON PROGRAMMING FUNDAMENTALS
CONDITIONS AND BRANCHING
LOOPS
FUNCTIONS
OBJECTS AND CLASSES


MODULE 4 - WORKING WITH DATA IN PYTHON
READING FILES WITH OPEN
WRITING FILES WITH OPEN
LOADING DATA WITH PANDAS
WORKING WITH AND SAVING DATA WITH PANDAS

MODULE 5 - WORKING WITH NUMPY ARRAYS
NUMPY 1D ARRAYS
NUMPY 2D ARRAYS


************************************************************************************************************
************************************************************************************************************
MODULE 1 - PYTHON BASICS
************************************************************************************************************
YOUR FIRST PROGRAM
TYPES
type()
converting a letter to int will give error
	int('A') #ERROR

EXPRESSIONS AND VARIABLES
Expressions : 10+45+67+90
Variables 	: x = 10+45+67+90



STRING OPERATIONS
Name = "Gurubux Gill"
Name[0] = 'B' \# ERROR - CANNOT CHANGE A STRING - IMMUTABLE
Name = Name + " is the Best" ✔

BackSlash is an escape Character
"\t \n \\"

Methods : 
	upper, lower, find, replace, 
G = "Mary had a little lamb Little lamb, little lamb Mary had a little lamb \
Its fleece was white as snow And everywhere that Mary went Mary went, Mary went \
Everywhere that Mary went The lamb was sure to go"
G.find('snow')
G = G.replace('Mary','Bob')
'Bob had a little lamb Little lamb, little lamb Bob had a little lamb Its fleece was white as snow And everywhere that Bob went Bob went, Bob went Everywhere that Bob went The lamb was sure to go'

************************************************************************************************************
MODULE 2 - PYTHON DATA STRUCTURES
************************************************************************************************************
LISTS AND TUPLES
Tuples - Ordererd sequence and Immutable 
new_tuple =	sorted(tuple_1)  \# This returns a list not tuple
new_tuple[0] = 'Hello' \# ERROR - CANNOT CHANGE A TUPLE - IMMUTABLE
genres_tuple = ("pop", "rock", "soul", "hard rock", "soft rock", \
                "R&B", "progressive rock", "disco") 
genres_tuple.index("disco")

Lists -  Ordererd sequence and Mutable
list_1 = ['Hi',3,6]
list_1.extend(['pop',1]) 	# ['Hi',3,6,'pop',1]
list_1.append(['pop',1]) 	# ['Hi',3,6,'pop',1,['pop',1]]
#Difference between extend and append
# After applying the following method,L.append(['a','b']), the following list will only be one element longer.

list_1[0] = 'Hello' 		# ['Hello',3,6,'pop',1,'A']
del(list_1[1])				# ['Hello',6,'pop',1,'A']

list_2 = "Hello World".split()
list_2						# ['Hello','World']

list_3 = "Hello,World".split() 
list_3						# ['Hello','World']

\Aliasing
list_2 = list_1  # Changes in any will cause changes in both
\Cloning
list_2 = list_1[:]  # Changes in any will NOT cause changes in both i.e New List is created

help(list_2)


SETS
Type of collection
Unordered
Only Unique Elements
set_1 = {1,2,4,5,6,7}

list_1 = [1,2,3,5,5,5,6]
set_2 = set(list_1) # {1,2,3,5,6 } # No Duplicates
>>> {1,2,3,5,6 }


set_2.add('Hello')
>>> {1,2,3,'Hello',5,6 }
set_2.remove(1)
>>> {2,3,'Hello',5,6 }

3 in set_2
>>> True

1 in set_2
>>> False

new_set = set_1 & set_2
album_set1.intersection(album_set2)
new_set = set_1.union(set_2)
album_set1.difference(album_set2)
album_set2.difference(album_set1)
set_1.issubset(set_2)
set(album_set1).issuperset(album_set2)
   


DICTIONARIES
{}
keys - Immutable and Unique
values  - Immutable, Mutable and Duplicates
key,values
Dict = {"key1": 1, "key2": "2", "key3": [3, 3, 3], "key4": (4, 4, 4), ('key5'): 5, (0, 1): 6}


dict_1['key1']
dict_1['key1'] = 'Great'
"key1" in dict_1 
>>> True
"Great" in dict_1 
>>> False

dict_1.keys() # List of keys
dict_1.values() # List of Values

release_year_dict = {"Thriller": "1982", "Back in Black": "1980", \
                    "The Dark Side of the Moon": "1973", "The Bodyguard": "1992", \
                    "Bat Out of Hell": "1977", "Their Greatest Hits (1971-1975)": "1976", \
                    "Saturday Night Fever": "1977", "Rumours": "1977"}
release_year_dict

release_year_dict.keys() 
>>>dict_keys(['Thriller', 'Back in Black', 'The Dark Side of the Moon', 'The Bodyguard', 'Bat Out of Hell', 'Their Greatest Hits (1971-1975)', 'Saturday Night Fever', 'Rumours'])

release_year_dict.values() 
>>>dict_values(['1982', '1980', '1973', '1992', '1977', '1976', '1977', '1977'])

release_year_dict['Graduation'] = '2007'
release_year_dict

del(release_year_dict['Thriller'])
del(release_year_dict['Graduation'])
release_year_dict

'The Bodyguard' in release_year_dict

************************************************************************************************************
MODULE 3 - PYTHON PROGRAMMING FUNDAMENTALS
************************************************************************************************************
CONDITIONS AND BRANCHING
'BA' < 'AB'
>>> False

Note: Upper Case Letters have different ASCII code than Lower Case Letters, which means the comparison between the letters in python is case-sensitive.

if age > 18:
    print("you can enter" )
elif age == 18:
    print("go see Pink Floyd")
else:
    print("go see Meat Loaf" )

if(album_year < 1980) and (album_year > 1989):
    print ("Album was not made in the 1980's")
else:
    print("The Album was made in the 1980's ")

if(album_year < 1980) or (album_year > 1989):
    print ("Album was not made in the 1980's")
else:
    print("The Album was made in the 1980's ")


if not (album_year == '1984'):
    print ("Album year is not 1984")




LOOPS
for i in range(-5,6):
    print(i)



FUNCTIONS
If there is no return statement, the function returns None
def MJ():
    print('Michael Jackson')
    
def MJ1():
    print('Michael Jackson')
    return(None)
"http://www.astro.up.pt/~sousasag/Python_For_Astronomers/Python_qr.pdf"

def Equation(a,b):
    c = a + b + 2 * a * b - 1
    if(c < 0):
        c = 0 
    else:
        c = 5
    return(c) 

Setting default argument values in your custom functions

def isGoodRating(rating=4): 
    if(rating < 7):
        print("this album sucks it`s rating is",rating)
        
    else:
        print("this album is good its rating is",rating)
isGoodRating()
isGoodRating(10)
>>> this album sucks it`s rating is 4
	this album is good its rating is 10

Global variables

artist = "Michael Jackson"
def printer1(artist):
    internal_var = artist
    print(artist, "is an artist")
    
printer1(artist)

artist = "Michael Jackson"

\NOTE
def printer(artist):
    global internal_var 
    internal_var= "Whitney Houston"
    print(artist,"is an artist")

printer(artist) 
printer(internal_var)
>>>	Michael Jackson is an artist
	Whitney Houston is an artist



OBJECTS AND CLASSES
class Circle(object):
    
    # Constructor
    def __init__(self, radius=3, color='blue'):
        self.radius = radius
        self.color = color 
    
    # Method
    def add_radius(self, r):
        self.radius = self.radius + r
        return(self.radius)
    
    # Method
    def drawCircle(self):
        plt.gca().add_patch(plt.Circle((0, 0), radius=self.radius, fc=self.color))
        plt.axis('scaled')
        plt.show()  


class Rectangle(object):
    
    # Constructor
    def __init__(self, width=2, height=3, color='r'):
        self.height = height 
        self.width = width
        self.color = color
    
    # Method
    def drawRectangle(self):
        plt.gca().add_patch(plt.Rectangle((0, 0), self.width, self.height ,fc=self.color))
        plt.axis('scaled')
        plt.show()
FatYellowRectangle = Rectangle(20, 5, 'yellow')
FatYellowRectangle.height 
FatYellowRectangle.width
FatYellowRectangle.color
FatYellowRectangle.drawRectangle()



What is the correct way to sort the list 'B' using a method, the result should not return a new list, just change the list 'B'.
B.sort()✔

sorted(B) # Returns a NEW list

************************************************************************************************************
MODULE 4 - WORKING WITH DATA IN PYTHON
************************************************************************************************************
READING FILES WITH OPEN
# Download Example file

!wget -O /resources/data/Example1.txt https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/labs/example1.txt

# Read the Example1.txt
example1 = "/resources/data/Example1.txt"
file1 = open(example1, "r")

# Print the path of file
file1.name

# Print the mode of file, either 'r' or 'w'
file1.mode

# Read the file
FileContent = file1.read()
FileContent
>>> 'This is line 1 \nThis is line 2\nThis is line 3'
# Print the file with '\n' as a new line

print(FileContent)
>>>This is line 1 
This is line 2
This is line 3

# Type of file content
type(FileContent)

# Close file after finish
file1.close()

A Better Way to Open a File
# Open file using with

with open(example1, "r") as file1:
    FileContent = file1.read()
    print(FileContent)

file1.closed
>>>True

# Read first four characters
with open(example1, "r") as file1:
    print(file1.read(4))

# Read certain amount of characters

with open(example1, "r") as file1:
    print(file1.read(4))
    print(file1.read(4))
    print(file1.read(7))
    print(file1.read(15))

>>>
	This
 is 
line 1 

This is line 2


# Read all lines and save as a list
with open(example1, "r") as file1:
    FileasList = file1.readlines()
FileasList[0]
'This is line 1 \n'



WRITING FILES WITH OPEN

# Write line to file
with open('/resources/data/Example2.txt', 'w') as writefile:
    writefile.write("This is line A")


# Write a new line to text file
with open('/resources/data/Example2.txt', 'a') as testwritefile:
    testwritefile.write("This is line C\n")

Lines = ["This is line A\n", "This is line B\n", "This is line C\n"]
# Write the strings in the list to text file
with open('Example2.txt', 'w') as writefile:
    for line in Lines:
        print(line)
        writefile.write(line)

Copy a File
with open('Example2.txt','r') as readfile:
    with open('Example3.txt','w') as writefile:
          for line in readfile:
                writefile.write(line)




LOADING DATA WITH PANDAS

WORKING WITH AND SAVING DATA WITH PANDAS
type(df[['Rating']]) <class 'pandas.core.frame.DataFrame'>
type(df['Rating']) pandas.core.series.Series
df.iloc[1,2]

************************************************************************************************************
MODULE 5 - WORKING WITH NUMPY ARRAYS
************************************************************************************************************
NUMPY 1D ARRAYS
A numpy array is similar to a list. It`s usually fixed in size and each element is of the same type. We can cast a list to a numpy array by first importing numpy:
# import numpy library
import numpy as np 
a = np.array([0, 1, 2, 3, 4])
type(a) >>> numpy.ndarray
a.dtype >>> dtype('int64')

c = np.array([20, 1, 2, 3, 4])
c[0] = 100
c[4] = 0

d = c[1:4]

c[3:5] = 300, 400
>>>array([100,   1,   2, 300, 400])

select = [0, 2, 3]
d = c[select] >>> array([100,   2, 300])


a = np.array([0, 1, 2, 3, 4])
a.size
a.ndim
a.shape
mean = a.mean()
standard_deviation=a.std()
max_a = a.max()
min_a = a.min()





u = np.array([1, 0])
v = np.array([0, 1])
z = u + v
>>>array([1, 1])

Plotvec1(u, z, v)



z = 2 * y
z = u * v
np.dot(u, v)

u + 1


# The value of pie
np.pi

# Create the numpy array in radians
x = np.array([0, np.pi/2 , np.pi])

# Calculate the sin of each elements
y = np.sin(x)
>>> array([0.0000000e+00, 1.0000000e+00, 1.2246468e-16])

linspace
A useful function for plotting mathematical functions is "linespace". Linespace returns evenly spaced numbers over a specified interval. We specify the starting point of the sequence and the ending point of the sequence. The parameter "num" indicates the Number of samples to generate, in this case 5
# Makeup a numpy array within [-2, 2] and 5 elements
np.linspace(-2, 2, num=5)
>>>array([-2., -1.,  0.,  1.,  2.])
np.linspace(-2, 2, num=9)
>>>array([-2. , -1.5, -1. , -0.5,  0. ,  0.5,  1. ,  1.5,  2. ])

x = np.linspace(0, 2*np.pi, num=100)
y = np.sin(x)
plt.plot(x, y)



Why are the results of the dot product for [-1, 1] and [1, 1] and the dot product for [1, 0] and [0, 1] zero, but not zero for the dot product for [1, 1] and [0, 1]
>>>The vectors used for question 4 and 5 are perpendicular. As a result, the dot product is zero.



NUMPY 2D ARRAYS
# Create a list
a = [[11, 12, 13], [21, 22, 23], [31, 32, 33]]
>>>[[11, 12, 13], [21, 22, 23], [31, 32, 33]]
A = np.array(a)
>>>array([[11, 12, 13],
       	  [21, 22, 23],
       	  [31, 32, 33]])
#Second Row Third Column
A[1, 2]
A[1][2]
>>>23
A[0][0]
>>>11

A[0][0:2]
>>>array([11, 12])

A[0:2, 2]
>>>array([13, 23])


X = np.array([[1, 0], [0, 1]]) 
Y = np.array([[2, 1], [1, 2]]) 
Z = X + Y
>>> array([[3, 1],
       	   [1, 3]])

Z = X * Y
>>>	array([[2, 0],
       	   [0, 2]])

Z = np.dot(X,Y)
>>> array([[2, 1],
           [1, 2]])

np.sin(Z)
>>> array([[0.90929743, 0.84147098],
           [0.84147098, 0.90929743]])


C = np.array([[1,1],[2,2],[3,3]])
>>> array([[1, 1],
           [2, 2],
           [3, 3]])
C.T
>>> array([[1, 2, 3],
           [1, 2, 3]])






************************************************************************************************************
I completed a course on Cognitive Class. Take a look at my certificate. 
https://courses.cognitiveclass.ai/certificates/461794794ca34c4c8e22de36486d8383
https://www.youracclaim.com/go/FPIu7ICh
https://www.youracclaim.com/badges/00cfb33c-3bd5-44b1-a9fb-1a200bc87be1/public_url